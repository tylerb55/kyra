-- Custom types
create type public.app_role as enum ('admin', 'user', 'doctor');

-- USERS (Medical Patients)
create table public.users (
  id          uuid references auth.users not null primary key, -- UUID from auth.users
  username    text,
  diagnosis   text,
  prescription text,
  age         integer,
  gender      text,
  ethnicity   text
);
comment on table public.users is 'Profile data for each patient.';
comment on column public.users.id is 'References the internal Supabase Auth user.';

-- MESSAGES (Patient-AI Conversations)
create table public.messages (
  id            bigint generated by default as identity primary key,
  inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,
  message       text,
  user_id       uuid references public.users not null,
  is_ai_response boolean default false not null
);
comment on table public.messages is 'Individual messages between patients and the AI.';

-- USER ROLES
create table public.user_roles (
  id        bigint generated by default as identity primary key,
  user_id   uuid references public.users on delete cascade not null,
  role      app_role not null,
  unique (user_id, role)
);
comment on table public.user_roles is 'Application roles for each user.';

-- RAG DOCUMENTS
create table public.rag_documents (
  id              bigint generated by default as identity primary key,
  title           text not null,
  content         text not null,
  url             text,
  source_type     text not null,
  category        text,
  tags            text[],
  author          text,
  publication_date date,
  last_updated    timestamp with time zone default timezone('utc'::text, now()) not null,
  embedding       vector(1536),
  metadata        jsonb
);
comment on table public.rag_documents is 'Documents used for retrieval-augmented generation (RAG).';
comment on column public.rag_documents.title is 'Title or name of the document/page.';
comment on column public.rag_documents.content is 'Full text content of the document.';
comment on column public.rag_documents.url is 'Source URL if from a website.';
comment on column public.rag_documents.source_type is 'Type of source (e.g., website, pdf, medical journal).';
comment on column public.rag_documents.category is 'Medical category or topic.';
comment on column public.rag_documents.tags is 'Array of relevant tags for improved retrieval.';
comment on column public.rag_documents.embedding is 'Vector embedding of the document for semantic search.';
comment on column public.rag_documents.metadata is 'Additional metadata in JSON format.';

-- Secure the tables
alter table public.users enable row level security;
alter table public.messages enable row level security;
alter table public.user_roles enable row level security;
alter table public.rag_documents enable row level security;

create policy "Allow logged-in read access" on public.users for select using ( auth.role() = 'authenticated' );
create policy "Allow individual insert access" on public.users for insert with check ( auth.uid() = id );
create policy "Allow individual update access" on public.users for update using ( auth.uid() = id );
create policy "Allow individual read access" on public.messages for select using ( auth.uid() = user_id );
create policy "Allow individual insert access" on public.messages for insert with check ( auth.uid() = user_id );
create policy "Allow individual read access" on public.user_roles for select using ( auth.uid() = user_id );
create policy "Allow authenticated read access" on public.rag_documents for select using ( auth.role() = 'authenticated' );
create policy "Allow admin insert access" on public.rag_documents for insert using ( 
  exists (
    select 1 from public.user_roles 
    where user_id = auth.uid() and role = 'admin'
  )
);
create policy "Allow admin update access" on public.rag_documents for update using (
  exists (
    select 1 from public.user_roles 
    where user_id = auth.uid() and role = 'admin'
  )
);
create policy "Allow admin delete access" on public.rag_documents for delete using (
  exists (
    select 1 from public.user_roles 
    where user_id = auth.uid() and role = 'admin'
  )
);

-- Send "previous data" on change 
alter table public.users replica identity full; 
alter table public.messages replica identity full;

-- inserts a row into public.users and assigns roles
create function public.handle_new_user() 
returns trigger as $$
declare is_admin boolean;
begin
  insert into public.users (id, username)
  values (new.id, new.email);
  
  select count(*) = 1 from auth.users into is_admin;
  
  if position('+doctor@' in new.email) > 0 then
    insert into public.user_roles (user_id, role) values (new.id, 'doctor');
  elsif position('+admin@' in new.email) > 0 then
    insert into public.user_roles (user_id, role) values (new.id, 'admin');
  else
    insert into public.user_roles (user_id, role) values (new.id, 'user');
  end if;
  
  return new;
end;
$$ language plpgsql security definer set search_path = auth, public;

-- trigger the function every time a user is created
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

/**
 * REALTIME SUBSCRIPTIONS
 * Only allow realtime listening on public tables.
 */

begin; 
  -- remove the realtime publication
  drop publication if exists supabase_realtime; 

  -- re-create the publication but don't enable it for any tables
  create publication supabase_realtime;  
commit;

-- add tables to the publication
alter publication supabase_realtime add table public.messages;
alter publication supabase_realtime add table public.users;

/**
 * MEDICAL SPECIFIC TABLES
 */

-- Medical conditions reference table
create table public.medical_conditions (
  id            bigint generated by default as identity primary key,
  name          text not null,
  description   text not null,
  symptoms      text[],
  treatments    text[]
);
comment on table public.medical_conditions is 'Reference data for medical conditions.';

-- Medications reference table
create table public.medications (
  id            bigint generated by default as identity primary key,
  name          text not null,
  description   text not null,
  dosage_info   text not null,
  side_effects  text[]
);
comment on table public.medications is 'Reference data for medications.';

-- Enable RLS on reference tables but allow reading
alter table public.medical_conditions enable row level security;
alter table public.medications enable row level security;

create policy "Allow authenticated read access" on public.medical_conditions 
  for select using (auth.role() = 'authenticated');
  
create policy "Allow authenticated read access" on public.medications 
  for select using (auth.role() = 'authenticated');

-- Create vector extension for embeddings if not exists
create extension if not exists vector;